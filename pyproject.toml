#####################
# Python packaging: #

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "asyncio-taskpool"
description = "Dynamically manage pools of asyncio tasks"
authors = [
    { name = "Daniil Fajnberg", email = "mail@daniil.fajnberg.de" },
]
maintainers = [
    { name = "Daniil Fajnberg", email = "mail@daniil.fajnberg.de" },
]
requires-python = ">=3.8, <4.0"
keywords = [
    "asyncio",
    "concurrency",
    "coroutines",
    "server",
    "tasks",
]
license = { text = "GNU Lesser General Public License v3 (LGPLv3)" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Framework :: AsyncIO",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = [
    "dependencies",
    "readme",
    "version",
]

[project.optional-dependencies]
dev = [
    "black==23.9.1",
    "build==1.0.3",
    "coverage[toml]==7.3.2",
    "isort==5.12.0",
    "mypy==1.5.1",
    "ruff==0.0.292",
    "sphinx==7.1.2",
    "sphinx-rtd-theme==1.3.0",
]

[project.urls]
"Repository" = "https://github.com/daniil-berg/asyncio-taskpool"
"Issue Tracker" = "https://github.com/daniil-berg/asyncio-taskpool/issues"
"Documentation" = "https://asyncio-taskpool.readthedocs.io/en/latest"

[tool.setuptools.dynamic]
dependencies = { file = "requirements/common.txt" }
readme = { file = ["README.md"], content-type = "text/markdown" }
version = { attr = "asyncio_taskpool.__version__" }

#########################
# Static type checking: #

[tool.mypy]
cache_dir = ".cache/mypy"
files = [
    "src/",
    "tests/",
]
warn_unused_configs = true
strict = true
show_error_codes = true
enable_incomplete_feature = []
plugins = []

#######################
# Unit test coverage: #

[tool.coverage.run]
data_file = ".cache/coverage"
source = [
    "src/",
]
branch = true
command_line = "-m tests"
omit = [
    ".venv*/*",
]

[tool.coverage.report]
fail_under = 100
show_missing = true
skip_covered = false
exclude_lines = [
    "if .*?sys.version.*:",
    "if TYPE_CHECKING:",
    '''if __name__ == ['"]__main__['"]:''',
    "@overload",
]
exclude_also = [
    'class \w+\(Protocol\):',
]
omit = [
    "tests/*",
]

###############################
# Linting and style checking: #

[tool.ruff]
cache-dir = ".cache/ruff"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
#    "D",    # pydocstyle
    "A",    # flake8-builtins
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "N",    # pep8-naming
    "PL",   # pylint
    "RUF",  # ruff-specific
]
ignore = [
    "E501",  # Line too long -> handled by black
    "D203",  # 1 blank line required before class docstring -> D211 is better
    "D212",  # Multi-line docstring summary should start at the first line -> ugly, D212 is better
    "D401",  # First line of docstring should be in imperative mood -> no, it shouldn't
    "D407",  # Missing dashed underline after section -> different docstring style
    "N818",  # Exception name {name} should be named with an Error suffix -> no, it shouldn't
]

[tool.ruff.per-file-ignores]
"src/**/__init__.py" = [
    "A001",  # Variable {name} is shadowing a Python builtin
    "D104",  # Missing docstring in public package
    "F401",  # {...} imported but unused
]
"tests/*.py" = [
    "D100",     # Missing docstring in public module
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D104",     # Missing docstring in public package
    "PLR0913",  # Too many arguments to function call
    "PLR0915",  # Too many statements
]

####################
# Code formatting: #

[tool.black]
line_length = 80

###################
# Import sorting: #

[tool.isort]
profile = "black"
extra_standard_library = ["typing_extensions"]
line_length = 80
